import { CoreTool, tool } from \"ai\";\nimport { z } from \"zod\";\nimport { ToolContext } from \"./types\";\nimport { githubRewriteFile } from \'../githubUtils\';\nimport { formatNewlines } from './utils';\n\nconst params = z.object({\n  path: z.string().describe(\'The path of the file to rewrite\'),\n  content: z.string().describe(\'The new content to write to the file\'),\n  owner: z.string().describe(\'The owner of the repository\'),\n  repo: z.string().describe(\'The name of the repository\'),\n  branch: z.string().describe(\'The branch to update\'),\n});\n\ntype Params = z.infer<typeof params>;\n\ntype Result = {\n  success: boolean;\n  summary: string;\n  details: string;\n  newContent: string;\n  oldContent: string;\n};\n\nexport const rewriteFileTool = (context: ToolContext): CoreTool<typeof params, Result> => tool({\n  description: \'Rewrites the contents of a file at the given path\',\n  parameters: params,\n  execute: async ({ path, content, owner, repo, branch }: Params): Promise<Result> => {\n    if (!context.gitHubToken) {\n      return {\n        success: false,\n        summary: \'Failed to rewrite file due to missing github token\',\n        details: \'The tool context is missing required repository information or GitHub token.\',\n        newContent: \'\',\n        oldContent: \'\',\n      };\n    }\n\n    try {\n      const { oldContent } = await githubRewriteFile({\n        path,\n        content: formatNewlines(content),\n        token: context.gitHubToken,\n        repoOwner: owner,\n        repoName: repo,\n        branch\n      });\n\n      return {\n        success: true,\n        summary: `Updated ${path}`,\n        details: `File ${path} has been successfully updated in ${owner}/${repo} on branch ${branch}.`,\n        newContent: content,\n        oldContent,\n      };\n    } catch (error) {\n      console.error(\'Error rewriting file:\', error);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      return {\n        success: false,\n        summary: \'Failed to rewrite file\',\n        details: `Error: ${errorMessage}`,\n        newContent: \'\',\n        oldContent: \'\',\n      };\n    }\n  },\n});