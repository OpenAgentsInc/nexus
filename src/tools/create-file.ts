import { tool, CoreTool } from \'ai\';\nimport { z } from \'zod\';\nimport { githubCreateFile } from \'../githubUtils\';\nimport { formatNewlines } from \'./utils\';\nimport { ToolContext } from \'./types\';\n\nconst params = z.object({\n  path: z.string().describe(\'The path where the new file should be created\'),\n  content: z.string().describe(\'The content of the new file\'),\n  owner: z.string().describe(\'The owner of the repository\'),\n  repo: z.string().describe(\'The name of the repository\'),\n  branch: z.string().describe(\'The branch to create the file on\'),\n});\n\ntype Params = z.infer<typeof params>;\n\ntype Result = {\n  success: boolean;\n  content: string;\n  summary: string;\n  details: string;\n};\n\nexport const createFileTool = (context: ToolContext): CoreTool<typeof params, Result> => tool({\n  description: \'Creates a new file at the given path with the provided content\',\n  parameters: params,\n  execute: async ({ path, content, owner, repo, branch }: Params): Promise<Result> => {\n    if (!context.gitHubToken) {\n      return {\n        success: false,\n        content: \'Missing GitHub token\',\n        summary: \'Failed to create file due to missing GitHub token\',\n        details: \'The tool context is missing the required GitHub token.\'\n      };\n    }\n\n    try {\n      await githubCreateFile({\n        path,\n        content: formatNewlines(content),\n        token: context.gitHubToken,\n        repoOwner: owner,\n        repoName: repo,\n        branch\n      });\n\n      return {\n        success: true,\n        content: `File ${path} created successfully.`,\n        summary: `Created file at ${path}`,\n        details: `File ${path} was created in the repository ${owner}/${repo} on branch ${branch}.`,\n      };\n    } catch (error) {\n      console.error(\'Error creating file:\', error);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      return {\n        success: false,\n        content: `Failed to create file ${path}.`,\n        summary: `Error creating file at ${path}`,\n        details: `Error: ${errorMessage}`,\n      };\n    }\n  },\n});